--------------------------------------------------------------------
CHAPTER 5 - DISTRIBUTING YOUR SOFTWARE
--------------------------------------------------------------------

- A Bit of setup.py History

    - The distutils library, originally created by software developer Greg Ward, has been part of 
        the standard Python library since 1998. Ward sought to create an easy way for developers to 
        automate the installation process for their end users. 

      Packages provide the setup.py file as the standard Python script for their installation, and 
        they can use distutils to install themselves.


    - Here, we build a 'setup.py' using 'distutils':

        #!/usr/bin/python
        from distutils.core import setup
        
        setup(name="rebuildd",
              description="Debian packages rebuild tool",
              author="Julien Danjou",
              author_email="acid@debian.org",
              url="http://julien.danjou.info/software/rebuildd.html",
              packages=['rebuildd'])


    - With the 'setup.py' file as the root of a project, all users have to do is run that file with 
        the appropriate command as its argument.  distutils can even handle C modules bundled
        in your application.


    - Eventually, distutils was abandoned, and several successors emerged.  The most used one now
        is 'setuptools'.

        #!/usr/bin/env python
        import setuptools
        
        setuptools.setup(
            name="rebuildd",
            version="0.2",
            author="Julien Danjou",
            author_email="acid@debian.org",
            description="Debian packages rebuild tool",
            license="GPL",
            url="http://julien.danjou.info/software/rebuildd/",
            packages=['rebuildd'],
            classifiers=[
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "License :: OSI Approved :: GNU General Public License (GPL)",
                "Operating System :: OS Independent",
                "Programming Language :: Python"
            ],
        )



- Packaging with setup.cfg

    - Building a 'setup.py' is not necessarily intuitive.  setuptools added support of the
        'setup.cfg' file to make things easier.

        # setup.py
        import setuptools
        setuptools.setup()

        # setup.cfg
        [metadata]
        name = foobar
        author = Dave Null
        author-email = foobar@example.org
        license = MIT
        long_description = file: README.rst
        url = http://pypi.python.org/pypi/foobar
        requires-python = >=2.6
        classifiers =
            Development Status :: 4 - Beta
            Environment :: Console
            Intended Audience :: Developers
            Intended Audience :: Information Technology
            License :: OSI Approved :: Apache Software License
            Operating System :: OS Independent
            Programming Language :: Python


    - Many other tools, such as Sphinx and Wheel, now also read information from the 'setup.cfg'.
        Note that it's always good to also have a README.rst so that users can quickly understand
        what the project is about.



- The Wheel Format Distribution Standard

    - For most of Python's existence, there has been no standard distribution format.  Each 
        distribution tool used it's own format (ie setuptools created the Egg format).

      To solve these problems, PEP 427 created the Wheel format.  It is supported by pip.


    - Here, we run the 'bdist_wheel' command to create a .whl file in the 'dist' directory:

        $ python setup.py bdist_wheel



- Sharing Your Work with the World

    - Once you have a proper 'setup.py', it is easy to build a source tarball that can be distributed.
        The setuptools 'sdist' command is used for that.

        # Creates a tarball in the 'dist' directory
        $ python setup.py sdist


    - The final step to make your code accessible is to export the package somewhere that users can
        install it via pip.  This means publishing to PyPI.

        1. Create a '~/.pypirc' file for settings.  We will use the PyPI test server to test changes
             before publishing to the PyPI production server.

            # ~/.pypirc
            [distutils]
            index-servers =
                testpypi

            [testpypi]
            username = <your username>
            password = <your password>
            repository = https://testpypi.python.org/pypi


        2. Now, we can register our project in the PyPI index:

            $ python setup.py register -r testpypi


        3. Now that the project is registered, we can upload the tarball:

            $ python setup.py sdist upload -r testpypi


        4. Alternatively, we can upload a wheel instead of a tarball:

            $ python setup.py bdist_wheel upload -r testpypi


        5. We can use pip to search for our package on the test server:

            $ pip install -i https://testpypi.python.org/pypi ceilometer


        6. Once everything checks out, we can publish to the PyPI production server:

            # Updated ~/.pypirc
            [distutils]
            index-servers =
                pypi
                testpypi
            
            [pypi]
            username = <your username>
            password = <your password>

            [testpypi]
            repository = https://testpypi.python.org/pypi
            username = <your username>
            password = <your password>


            # Register package in production
            $ python setup.py register -r pypi

            # Upload package in production
            $ python setup.py register -r pypi



- Entry Points


- Visualizing Entry Points


- Using Console Scripts


- Using Plugins and Drivers