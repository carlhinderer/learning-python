--------------------------------------------------------------------
CHAPTER 2 - MODULES, LIBRARIES, & FRAMEWORKS
--------------------------------------------------------------------

- The Import System

    - The 'import' keyword is actually a wrapper around a function named '__import__'.

        # These are the same
        >>> import itertools
        >>> itertools = __import__("itertools")

        # These are also the same
        >>> import itertools as it
        >>> it = __import__("itertools")


    - This technique can be leveraged to load a module whose name you don't know at compile time.  
        Remember that modules, once imported, are essentially objects with classes, functions, 
        variables, etc.

        >>> random = __import__("RANDOM".lower())



- The sys Module

    - The 'sys' module provides access to variables and functions related to Python itself and the 
        operating system it is running on.  It also contains information about Python's import
        system.


    - The 'sys.modules' variable is a dictionary whose key is the module name and value is the 
        module object.

        >>> import sys
        >>> import os
        >>> sys.modules['os']
        <module 'os' from '/usr/lib/python2.7/os.pyc'>


    - We can also retrieve the list of built-in modules.

        >>> import sys
        >>> sys.builtin_module_names



- Import Paths

    - When importing modules, Python relies on a list of paths to know where to look for the
        module.  This list is stored in the 'sys.path' variable.

        # Add a path for modules
        >>> import sys
        >>> sys.path.append('/foo/bar')



- Custom Importers

    - The import mechanism can be extended using custom importers.  This 'import hook technique'
        is defined by PEP 302.

      For example, you could write an extension that imports modules from a database or does
        sanity checks before importing a module.


    - Python offers 2 different ways to broaden the import system:

        1. Meta Path Finders for use with 'sys.meta_path'
        2. Path Entry Finders for use with 'sys.path_hooks'



- Meta Path Finders

    - The 'meta path finder' is an object that will allow you to load custom objects as well as
        standard .py files.  

      A meta path finder object must expose a 'find_module(fullname, path=None)' method that returns 
        a loader object.  The loader object must also have a 'load_module(fullname)' method
        resposible for loading the module from a source file.


    - We want to write classes so that we can load modules in files with .hy extensions.  Here is the
        finder object:

        class MetaImporter(object):
            def find_on_path(self, fullname):
                fls = ["%s/__init__.hy", "%s.hy"]
                dirpath = "/".join(fullname.split("."))
        
                for pth in sys.path:
                    pth = os.path.abspath(pth)
                    for fp in fls:
                        composed_path = fp % ("%s/%s" % (pth, dirpath))
                        if os.path.exists(composed_path):
                            return composed_path
        
            def find_module(self, fullname, path=None):
                path = self.find_on_path(fullname)
                if path:
                    return MetaLoader(path)

        sys.meta_path.append(MetaImporter())


    - Once Python has determined that the path is valid and points to a module, a 'MetaLoader' class is
        returned:

        class MetaLoader(object):
            def __init__(self, path):
                self.path = path
        
            def is_package(self, fullname):
                dirpath = "/".join(fullname.split("."))
                for pth in sys.path:
                    pth = os.path.abspath(pth)
                    composed_path = "%s/%s/__init__.hy" % (pth, dirpath)
                    if os.path.exists(composed_path):
                        return True
                return False
        
            def load_module(self, fullname):
                if fullname in sys.modules:
                    return sys.modules[fullname]
        
                if not self.path:
                    return
        
                sys.modules[fullname] = None
                mod = import_file_to_module(fullname, self.path)
        
                ispkg = self.is_package(fullname)
        
                mod.__file__ = self.path
                mod.__loader__ = self
                mod.__name__ = fullname
        
                if ispkg:
                    mod.__path__ = []
                    mod.__package__ = fullname
                else:
                    mod.__package__ = fullname.rpartition('.')[0]
        
                sys.modules[fullname] = mod
                return mod



- Useful Standard Libraries

    atexit
      Allows you to register functions for your program to call when it exits

    argparse
      Provides functions for parsing command line arguments

    bisect
      Provides bisection algorithms for sorting lists

    calendar
      Provides a number of date-related functions

    codecs
      Provides functions for encoding and decoding data

    collections
      Provides a variety of useful data structures

    concurrent
      Provides asynchronous computation

    copy
      Provides functions for copying data

    csv
      Provides functions for reading and writing csv files

    datetime
      Provides classes for handling dates and times

    fnmatch
      Provides functinos for matching Unix-style filename patterns

    glob
      Provides functinos for matching Unix-style path patterns

    io
      Provides functions for handling i/o streams

    json
      Provides functions for reading and writing JSON data

    logging
      Provides access to Python's own built-in logging functionality

    multiprocessing
      Allows you to run multiple subprocesses from your application, while providing an API
      that makes them look like threads.

    operator
      Provides functions for impementing basic Python operators

    os
      Provides access to basic OS functions

    random
      Provides functions for generating pseudorandom numbers

    re
      Provides regular expression functionality

    sched
      Provides an event scheduler without using multithreading

    select
      Provides access to the 'select()' and 'poll()' functions for creating event loops

    shutil
      Provides access to high-level file functions

    signal
      Provides functions for handling POSIX signals

    tempfile
      Provides functions for creating temporary files and directories

    threading
      Provides access to high-level threading functionality

    urllib
      Provides functinos for handling and parsing URLs

    uuid
      Allows you to generate UUIDs



- External Libraries

    - Python has a vast ecosystem of third-party packages.  Note that unlike the standard library,
        external libraries may be buggy, have sparse documentation, or never update.  So, it is
        necessary to be mindful of the risks in using them.



- The External Libraries Safety List

    - To mitigate risks, this checklist can be used to determine whether an external library should
        be used:

        1. Is it Python 3 compatible?
        2. Is it being actively developed?
        3. Is it being actively maintained?
        4. Is it packaged with Linux distros (if it is, many people will be watching for issues)?
        5. Does the API have breaking changes?
        6. What is the license?



- Protecting Your Code with an API Wrapper

    - No matter how useful an external library might be, be way of letting it get its hooks in your
        actual code.  A better idea is to write your own wrapper around the library.

      That way, if you need to use a different library, we'll just have to change the wrapper.



- Getting More From pip

    - pip can install or uninstall packages from the PyPI (Python Packaging Index), a tarball, or a
        Wheel archive.

        # Install a package
        $ pip install voluptuous

        # Install a package in your home directory to avoid polluting system-wide directories
        $ pip install --user voluptuous

        # Uninstall a package
        $ pip uninstall voluptuous


    - The 'freeze' command can be used to list the packages you already have installed.

        $ pip freeze


    - One useful feature of pip is the ability to install a package without copying the package's file.
        You can do this when you're actively working on a package and want to avoid reinstalling it 
        every time you need to test a change.

        $ pip install -e .

      Here, pip does not copy the files from the local source directory, but places a special file, called
        an 'egg-link', in your distribution path.  The egg-link file contains the path to add to 
        'sys.path' to look for packages.


    - The '-e' option can also be used to install a library directly from a VCS repository.

        # Install a library directly from github
        $ pip install -e git+https://github.com/jd/daiquiri.git\#egg=daiquiri

      In this case, pip uses a 'git clone' command to copy the repository locally and creates an egg-link
        for it.



- Using and Choosing Frameworks

    - The main difference between frameworks and external libraries is that applications use frameworks
        by building on top of them.  There are upsides, like increased productivity.  

      There are also downsides, like lock-in.  Typically, replacing a framework requires a complete 
        rewrite of your program from the ground up.