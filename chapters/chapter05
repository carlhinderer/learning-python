-------------------------------------------------
CHAPTER 5 - NUMERIC TYPES
-------------------------------------------------

- Numeric Literals

    # Integers (Unlimited Size)
    1234, -24, 0, 9999999999999999

    # Floating-Point Numbers
    1.23, 1., 3.14e-10, 4E210, 4.0e+210

    # Octal, Hex, and Binary (3.X)
    0o177, 0x9ff, 0b101010

    # Octal, Octal, Hex, and Binary (2.X)
    0177, 0o0177, 0x9ff, 0b101010

    # Complex Numbers
    3+4j, 3.0+4.0j, 3J

    # Sets
    set('spam'), {1, 2, 3, 4}

    # Decimals and Fractions
    Decimal(1.0)
    Fraction(1, 3)

    # Booleans
    bool(X), True, False


    - Floating point numbers are implemented as C doubles in CPython

    - (Python 2.X) There are 2 integer types, normal and long
      (Python 3.X) They are merged into a single integer type



- Python Operators (From Lowest Precedence to Highest)

    yield x                          # Generator function send protocol
    lambda args: expression          # Anonymous function generation

    x if y else z                    # Ternary Selection

    x or y                           # Logical OR, AND, NEGATION
    x and y
    not x

    x in y                           # Membership in iterables and sets
    x not in y

    x is y                           # Object Identity Tests
    x is not y

    < > <= >=                        # Magnitude Comparison
    == !=                            # Value Equality

    x | y                            # Bitwise OR, XOR, AND, LSHIFT, RSHIFT
    x ^ y
    x & y
    x << y
    x >> y

    + -                              # Mathematical
    * %                              
    /                                # True Division (3.X) or Classic Division (2.X)
    //                               # Floor Division
    -                                # Negation
    **                               # Power

    x[i]                             # Index
    x[i:j:k]                         # Slicing

    x(...)                           # Call
    x.attr                           # Attribute Reference

    (...)                            # Tuple
    [...]                            # List
    {...}                            # Dictionary or Set
    


- Type Conversions

    >>> int(3.1415)
    3

    >>> float(3)
    3.0

    # Mixed type expressions convert up
    >>> 40 + 3.14
    43.14



- Numeric Display Formats

    - In Python <= 2.6, 3.0, it's possible you'll see some floating point weirdness.

        >>> a = 3
        >>> b = 4
        >>> b / (2.0 + a)
        0.80000000000000004

      This is actually a display issue.  In the interactive prompt, 'repr()' is being called.

        >>> print(b / (2.0 + a))
        0.8

      When you call print(), str() is being called.



- Chained Comparisons

    - Python allows comparison chaining

        >>> X = 2
        >>> Y = 4
        >>> Z = 6

        >>> X < Y < Z
        True

        >>> X > Y < Z
        Falso



- 2.X and 3.X Integer Division

    X / Y
      (2.X) Classic Division = truncates for integers, float for float types
      (3.X) True Division = returns a float regardless of operand types

    X // Y
      (2.X and 3.X) Floor Division = always rounds down, regardless of operand types
                                   = rounds down even for negative numbers

    >>> 5 / −2     # Keep remainder
    −2.5

    >>> 5 // −2    # Floor below result
    -3

    >>> math.trunc(5 / −2)     # Truncate instead of floor (same as int())
    −2




































