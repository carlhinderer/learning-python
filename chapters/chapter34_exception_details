-------------------------------------------------
CHAPTER 34 - EXCEPTION DETAILS
-------------------------------------------------

- The try/except/else Statement

    try: 
        statements
    except name1:
        statements
    except (name2, name3):     # Run if any of these occur
        statements
    except name4 as var:       # Assign exception to variable
        statements
    except:                    # For any other exceptions raised
        statements
    else:                      # If no exceptions occur
        statements



- In 2.5+, try/except/else and try/finally can be used together in the same statement.

    try:
        main-action
    except Exception1:
        handler1
    else:
        else-block
    finally:
        finally-block



- The 'finally' clause is always run, even if
    - an exception occurred in the main action and was handled
    - an exception occurred in the main action and was not handled
    - no exceptions occurred in the main action
    - a new exception was triggered in one of the handlers



- The 'raise' Statement

    raise instance         # Raise instance of a class
    raise IndexError()

    raise class            # Makes and raises instance of a class
    raise IndexError

    raise                  # Re-raise the most recent exception

    # raise example
    # Bubbles the exception up the chain
    try:
        raise IndexError('spam')
    except IndexError:
        print('Propogating')
        raise



- The 'assert' Statement

    The 'assert' statement is used for debugging.  It's basically just a conditional 'raise'
      statement.  

    # assert statement
    assert test, data

    # assert equivalent
    if __debug__:
        if not test:
            raise AssertionError(data)


    # assert example
    def f(x):
        assert x < 0, 'x must be negative'
        return x ** 2



- with/as Context Managers

    The 'with' statement is similar to the 'using' statement in C#.

    # File objects have a context manager that automatically closes
    #   the file after the 'with' block.
    with open('myfile.txt') as myfile:
        for line in myfile:
            print(line



- The Context Manager Protocol

    Here's how the 'with' statement actually works:

      1. The expression is evaluated, resulting in an object known as a 'context manager'
           that must have '__enter__' and '__exit__' methods.

      2. The context manager's '__enter__' method is called.  The value it returns is assigned
           to the variable in the 'as' clause.

      3. The code within the 'with' block is executed.

      4. If the 'with' block raises an exception, the '__exit__' method is called with the
           exception details.  If this method returns a false value, the exception is
           re-raised.  Otherwise, the exception is terminated.

      5. If the 'with' block does not raise an exception, the '__exit__' method is still called,
           but it's 'type', 'value', and 'traceback' arguments are all passed in as 'None'.



- Context Manager Example

    class TraceBlock:
        def message(self, arg):
            print('running ' + arg)
        def __enter__(self):
            print('starting with block')
            return self
        def __exit__(self, ex_type, ex_value, ex_tb):
            if ex_type is None:
                print('exited normally')
            else:
                print('raised an exception:', str(ex_type))
                return False

    if __name__ == '__main__':
        with TraceBlock() as action:
            action.message('test 1')
            print('reached')

        with TraceBlock() as action:
            action.message('test 2')
            raise TypeError
            print('not reached')



- Multiple Context Managers

    In 2.7+ and 3.1+, multiple context managers can be used at the same time.

    with open('data') as fin, open('res', 'w') as fout:
        for line in fin:
            if 'some key' in line:
                fout.write(line)