-------------------------------------------------
CHAPTER 4 - INTRODUCING PYTHON OBJECT TYPES
-------------------------------------------------

- Python Conceptual Hierarchy

    1. Programs are composed of modules.
    2. Modules contain statements.
    3. Statements create expressions.
    4. Expressions create and process objects.



- Built-In Types

    1. Numbers
         1234, 3.1415, 3+4j, 0b111, Decimal(), Fraction()

    2. Strings
         'Spam', b'a\x01c', u'sp\xc4m'

    3. Lists
         [1, [2, 'three'], 4.5], list(range(10))

    4. Dictionaries
         {'food': 'spam', 'taste': 'yum'}

    5. Tuples
         (1, 'spam', 4), tuple('spam'), namedtuple

    6. Files
         open('eggs.txt'), open(r'C:\ham.bin', 'wb')

    7. Sets
         set('abc'), {'a', 'b', 'c'}

    8. Other Core Types
         Booleans, types, None

    9. Program Unit Types
         Functions, modules, classes

    10. Implementation-Related Types
         Compiled code, stack tracebacks



- Numbers

    - Very large exponents can by computed in Python, as Python's 3.X integer
        type automatically adds extra precision for large numbers when needed.

        >>> len(str(2 ** 1000000))
        301030
    


- Strings

    - Sequence Operations

        >>> S = 'Spam'
        >>> len(S)
        4
        >>> S[0]
        'S'
        >>> S[-1]
        'm'

        >>> S[1:3]
        'pa'    # Slice starting at 1, not including 3
        >>> S[0:3]
        'Spa'
        >>> S[:3]
        'Spa'   # Same as [0:3]
        >>> S[:]
        'Spam'

        >>> S + 'xyz'
        'Spamxyz'
        >>> S * 8
        'SpamSpamSpamSpamSpamSpamSpamSpam'

    - Python strings are immutable.

    - The 'bytearray' type does allow for in-place text changes if you need it.

    - String Methods

        >>> S = 'Spam'
        >>> S.find('pa')
        1
        >>> S.replace('pa', 'XYZ')
        'SXYZm'
        >>> S.upper()
        'SPAM'
        >>> S.isalpha()
        True

        >>> line = 'aaa,bbb,ccc,ddd'
        >>> line.split()
        ['aaa','bbb','ccc','ddd']

        >>> line = 'aaa,bbb,ccccc,dd\n'
        >>> line.rstrip()
        'aaa,bbb,ccccc,dd'

        # Works in all Pythons
        >>> '%s, eggs, and %s' % ('spam', 'SPAM!')
        'spam, eggs, and SPAM!'

        # Works in 2.6+, 3.0+
        >>> '{0}, eggs, and {1}'.format('spam', 'SPAM!')
        'spam, eggs, and SPAM!'

        # Works in 2.7+, 3.1+
        >>> '{}, eggs, and {}'.format('spam', 'SPAM!')

    - Escape Sequences

        >>> S = 'A\nB\nC'
        >>> len(S)
        5

        >>> ord('\n')
        10         # \n is a byte with binary value 10 in ASCII

    - Multiline String Declarations

        >>> msg = """
        FirstPart
        SecondPart
        ThirdPart
        """
        >>> msg
        'FirstPartSecondPartThirdPart'

    - Unicode Strings

        # Python 3.X
        The normal 'str' string handles Unicode text (including ASCII, which is just a
          simple kind of Unicode).  A 'bytes' string type represents raw byte value.
          2.X Unicode literals are supported in 3.3+ for compatibility's sake.

        >>> 'sp\xc4m'     # 3.X: normal str strings are Unicode text
        'spÄm'
        >>> b'a\x01c'     # bytes strings are byte-based data
        b'a\x01c'
        >>> u'sp\u00c4m'  # The 2.X Unicode literal works in 3.3+: just str
        'spÄm'


        # Python 2.X
        The normal 'str' string handles both 8-bit strings and raw byte values.  A 
          'unicode' string type represents Unicode text.  3.X bytes are supported in 
          2.6+ for compatibility's sake.

        >>> print u'sp\xc4m'      # 2.X: Unicode strings are a distinct type
        spÄm
        >>> 'a\x01c'              # Normal str strings contain byte-based text/data
        'a\x01c'
        >>> b'a\x01c'             # The 3.X bytes literal works in 2.6+: just str
        'a\x01c'

    - Pattern Matching

       >>> import re
       >>> match = re.match('Hello[\t]*(.*)world', 'Hello    Python world')
       >>> match.group(1)
       'Python '



- Lists

    - Lists are dynamically-resizing ordered collections.

    - Sequence Operations

        >>> L = [123, 'spam', 1.23]
        >>> len(L)
        3
        >>> L[0]
        123
        >>> L[:-1]
        [123, 'spam']

        >>> L + [4, 5, 6]
        [123, 'spam', 1.23, 4, 5, 6]
        >>> L * 2
        [123, 'spam', 1.23, 123, 'spam', 1.23]

    - List Operations

        >>> L.append('NI')
        >>> L
        [123, 'spam', 1.23, 'NI']

        >>> L.pop(2)
        1.23
        >>> L
        [123, 'spam', 'NI']

        >>> M = ['bb', 'aa', 'cc']
        >>> M.sort()
        >>> M
        ['aa', 'bb', 'cc']

        >>> M.reverse()
        >>> M
        ['cc', 'bb', 'aa']


    - All of Python's core data types allow arbitrary nesting.

        >>> M = [[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]]
        >>> M[1][2]
        6


    - Python also has advanced set operations called 'Comprehensions' for collections

        >>> col2 = [row[1] for row in M]
        [2, 5, 8]

        >>> [row[1] for row in M if row[1] % 2 == 0]
        [2, 8]

        >>> diagonal = [M[i][i] for i in [0, 1, 2]]
        >>> diagonal
        [1, 5, 9]

        >>> list(range(4))
        [0, 1, 2, 3]

        >>> list(range(-6, 7, 2))
        [-6, -4, -2, 0, 2, 4, 6]



- Dictionaries

    - Dictionaries are dynamically-resizing, unordered collections of key/value pairs.

    - Mapping Operations

        >>> D = {'food': 'Spam', 'quantity': 4, 'color': 'pink'}
        >>> D['food']
        'Spam'

        >>> D['quantity'] += 1
        >>> D['e'] = 99

        >>> if not 'f' in D:
                print('missing')

    - Sorting Keys

        # Long way to do it
        >>> D = {'a': 1, 'b': 2, 'c': 3}
        >>> Ks = list(D.keys())
        >>> Ks.sort()
        >>> Ks
        ['a', 'b', 'c']
        >>> for key in Ks:
                print(key, '=>', D[key])
        a => 1
        b => 2
        c => 3

        # Shorter way
         >>> for key in sorted(D):
                print(key, '=>' D[key])       



- Iteration and Optimization

     - In Python, an object is 'iterable' if it either:
           1. a pysically stored sequence in memory
           2. an object that generates one item at a time in the context of an 
                  iteration operation

     - Formally, an object is iterable if it responds to the iter() call with an object 
         that advances in response to next() calls and raises an exception when it
         is finished producing values.  This is called the 'iteration protocol'.



- Tuples

    - Tuples are immutable sequences.  They are used to represent fixed collections of 
        items.  The support arbitrary types, arbitrary nesting, and the usual 
        sequence operations.

    - Tuple Operations

        >>> T = (1, 2, 3, 4)
        >>> len(T)
        4

        >>> T + (5, 6)
        (1, 2, 3, 4, 5, 6)

        >>> T[0]
        1

        >>> T[0] = 2
        TypeError: 'tuple' object does not support item assignment

        # Parentheses enclosing tuple's items can often be omitted
        >>> T = 'spam', 3.0, [11, 22, 33]
        >>> T[2][1]
        22



- Files

      - File Operations

          >>> f = open('data.txt', 'w')
          >>> f.write('Hello\n')
          6
          >>> f.write('world\n')
          6
          >>> f.close()

          >>> f = open('data.txt')
          >>> text = f.read()
          >>> text
          'Hello\nworld\n'

          >>> print(text)
          Hello
          world

          >>> text.split()
          ['Hello', 'world']

          >>> for line in open('data.txt'): print(line)

      - There are tools available for reading the raw byte data of binary files also.

      - You can specify the encoding you want to open a file with, if it may differ
          from the system's default.

          >>> file = open('unidata.txt', 'w', encoding='utf-8')



- Other Core Types

      - Sets are recent additions to the language.  They are unordered collections of unique
          and immutable objects.

          >>> X = set('spam')
          >>> Y = {'h', 'a', 'm'}

          >>> X, Y      # tuple of sets
          ({'m', 'a', 'p', 's'}, {'m', 'a', 'h'})

          >>> X & Y
          {'m', 'a'}

          >>> X | Y
          {'m', 'h', 'a', 'p', 's'}

          >>> X - Y
          {'p', 's'}

          >>> set('spam') - set('ham')
          {'p', 's'}


      - There are new Decimal and Fraction types to work around the limitations of 
          floating-point math.

          # Decimals have fixed precision
          >>> import decimal
          >>> d = decimal.Decimal('3.141')
          >>> d + 1
          4.141

          >>> decimal.Decimal('1.00') / decimal.Decimal('3.00')
          Decimal(0.33)


          # Fractions have an integer numerator and denominator
          >>> from fractions import Fraction
          >>> f = Fraction(2, 3)
          >>> f + 1
          Fraction(5, 3)


      - There is a built-in Boolean type

          >>> 1 > 2, 1 < 2
          (False, True)

          >>> bool('spam')
          True


      - There is also a None placeholder object commonly used to initialize names and objects.

          >>> X = Nome
          >>> print(X)
          None
