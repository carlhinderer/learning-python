-------------------------------------------------
CHAPTER 39 - DECORATORS
-------------------------------------------------

- Decorators

    Decorators provide a way to insert automatically run code at the end of function
      and class definition statements.  The decorator approach is sometimes called
      'aspect-oriented programming' or 'annotation' in other languages.

    Function decorators install wrapper objects to intercept later function calls.

    Class decorators install wrapper objects to intercept later instance creation calls.



- Decorator Usage

    @decorator
    def F(arg):
       ...

    F(99)          # Calls decorator(F)(99)


    # Static method example
    class C:
        @staticmethod
        def meth(...): ...       # meth = staticmethod(meth)

    # Property example
    class C:
        @property
        def name(self): ...      # name = property(name)



- Function decorator Implementation

    def decorator(F):
        # Process function F
        return F

    @decorator
    def func(): ...


    # Wrapper example
    def decorator(F):                     # On @ decoration
        def wrapper(*args):               # On wrapped function call
            # Use F and args
            # F(*args) calls original function
            return wrapper

    @decorator                            # func = decorator(func)
    def func(x, y):                       # func is passed to decorator's F



- Class decorator implementation

    def decorator(C):
        # Process class C
        return C

    @decorator
    class C: ...


    # Wrapper example
    def decorator(cls):                             # On @ decoration
        class Wrapper:
            def __init__(self, *args):              # On instance creation
                self.wrapped = cls(*args)
            def __getattr__(self, name):            # On attribute fetch
                return getattr(self.wrapped, name)
        return Wrapper

    @decorator
    class C:                                        # C = decorator(C)
        def __init__(self, x, y):                   # Run by Wrapper.__init__
            self.attr = 'spam'


    >>> x = C(6, 7)                                 # Really calls Wrapper(6, 7)
    >>> print(x.attr)                               # Runs Wrapper.__getattr__, prints "spam"



- Decorator Nesting

    @A
    @B
    @C
    def f(...):
        ...

    IS EQUIVALENT TO

    def f(...):
        ...

    f = A(B(C(f)))



- Decorator Arguments

    @decorator(A, B)
    def F(arg):
        ...

    IS EQUIVALENT TO

    def F(arg):
        ...

    F = decorator(A, B)(F)



- Example - Decorator Timer

    import time, sys
    force = list if sys.version_info[0] == 3 else (lambda X: X)

    class timer:
        def __init__(self, func):
            self.func    = func
            self.alltime = 0
        def __call__(self, *args, **kargs):
            start   = time.clock()
            result  = self.func(*args, **kargs)
            elapsed = time.clock() - start
            self.alltime += elapsed
            print('%s: %.5f, %.5f' % (self.func.__name__, elapsed, self.alltime))
            return result

    @timer
    def listcomp(N):
        return [x * 2 for x in range(N)]

    @timer
    def mapcall(N):
        return force(map((lambda x: x * 2), range(N)))

    result = listcomp(5)                # Time for this call, all calls, return value
    listcomp(50000)
    listcomp(500000)
    listcomp(1000000)
    print(result)
    print('allTime = %s' % listcomp.alltime)      # Total time for all listcomp calls

    print('')
    result = mapcall(5)
    mapcall(50000)
    mapcall(500000)
    mapcall(1000000)
    print(result)
    print('allTime = %s' % mapcall.alltime)       # Total time for all mapcall calls

    print('\n**map/comp = %s' % round(mapcall.alltime / listcomp.alltime, 3))



- Why use decorators?

    1. Explicit Syntax = augmentation is explicit and obvious
    2. Code Maintenance = avoid repeated augmentation code at each function or class call
    3. Consistency = programmers are less likely to forget to use it