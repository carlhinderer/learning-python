-------------------------------------------------
CHAPTER 9A - TUPLES AND FILES
-------------------------------------------------

- Tuples are very similar to lists, however they are immutable.  Tuples are:

    1. Ordered collections of arbitrary objects
    2. Accessed by offset
    3. Immutable sequences
    4. Fixed-length, heterogenous, and arbitrarily nestable
    5. Implemented as arrays of object references



- Creating Tuples

    # Empty Tuple
    >>> ()

    # 1-Item Tuple
    >>> T = (0,)

    # 4-Item Tuples
    >>> T = (0, 'Ni', 1.2, 3)
    >>> T = 0, 'Ni', 1.2, 3

    # Nested Tuples
    T = ('Bob', ('dev', 'mgr'))

    # Tuple of items as an iterable
    T = tuple('spam')



- Tuple Methods

    # Concatenation
    >>> (1, 2) + (3, 4)
    (1, 2, 3, 4)

    # Repitition
    >>> (1, 2) * 4
    (1, 2, 1, 2, 1, 2, 1, 2)

    # Indexing and Slicing
    >>> T - (1, 2, 3, 4)
    >>> T[0], T[1:3]
    (1, (2, 3))

    # List Comprehension From a Tuple
    >>> T = (1, 2, 3, 4, 5)
    >>> L = [x + 20 for x in T]
    >>> L
    [21, 22, 23, 24, 25]

    # Index and Count
    >>> T = (1, 2, 3, 2, 4, 2)    
    >>> T.index(2)
    1
    >>> T.count(2)
    3



- Tuples and other immutables serve a role similr to constant declarations in
    other languages.  Though, the notion of 'constantness' is associated with objects
    in Python, not with variables.



- File Usage Notes:

    1. File iterators are best for reading lines
    2. All content is strings
    3. Files are buffered (this can be disabled though) and seekable
    4. close() is often optional, but still may be a good idea



- Reading and Writing Files

    # Opening for reading and writing
    >>> output = open(r'C:\spam', 'w')

    >>> input = open('data', 'r')
    >>> input = open('data')         # 'r' is the default


    # Modes
    'r'        Open for reading
    'w'        Open for writing
    'a'        Open for appending

    Adding 'b' to the mode string allows for binary data.
    Adding '+' opens the file for both reading and writing.


    # Reading and Writing
    >>> aString = input.read()             # Read entire file into single string
    >>> aString = input.read(N)            # Read first N characters into a string
    >>> aString = input.readline()         # Read next line (including \n) into string
    >>> aList = input.readlines()          # Read entire file into list of lines

    >>> output.write(aString)              # Write a string into file
    >>> output.writelines(aList)           # Write all line string in a list into file


    # Flushing and Closing
    >>> output.close()                     # Manual close
    >>> output.flush()                     # Flush output buffer to disk without closing

    # Seeking
    >>> anyFile.seek(N)                    # Change file position to offset N
    >>> for line in open('data')           # File iterator

    # 3.X Unicode
    open('f.txt', encoding='latin-1')

    # 3.X Binary
    open('f.bin', 'rb')



- Storing Native Python Objects with 'pickle'

    # Serializing an object with pickle
    >>> import pickle
    >>> D = {'a': 1, 'b': 2}
    >>> F = open('datafile.pk1', 'wb')
    >>> pickle.dump(D, F)
    >>> F.close()

    # Deserializing an object with pickle
    >>> import pickle
    >>> F = open('datafile.pk1', 'rb')
    >>> D = pickle.load(F)
    >>> E
    {'a': 1, 'b': 2}



- Storing Python Objects in JSON

    # Create an object
    >>> name = dict(first='Bob', last='Smith')
    >>> rec  = dict(name=name, job=['dev', 'mgr'], age=40.5)
    >>> rec
    {'job': ['dev', 'mgr'], 'name': {'last': 'Smith', 'first': 'Bob'}, 'age': 40.5}

    # Convert from object to JSON
    >>> import json
    >>> S = json.dumps(rec)
    >>> S
    '{"job": ["dev", "mgr"], "name": {"last": "Smith", "first": "Bob"}, "age": 40.5}'

    # Convert from JSON to object
    >>> O = json.loads(S)
    >>> O
    {'job': ['dev', 'mgr'], 'name': {'last': 'Smith', 'first': 'Bob'}, 'age': 40.5}



- File Context Manager (3.X)

    # Will close file after end of block instead of waiting for GC
    >>> with open('data.txt') as myfile:
            for line in myfile:
                ...Do something...