-------------------------------------------------
CHAPTER 28 - CLASS EXAMPLE
-------------------------------------------------

- This is the 'Person' class with tests included in the class definition file itself.

    class Person:
        def __init__(self, name, job=None, pay=0):
            self.name = name
            self.job  = job
            self.pay  = pay
        def lastName(self):
            return self.name.split()[-1]
        def giveRaise(self, percent):
            self.pay = int(self.pay * (1 + percent))

    # Test the class if not being imported
    if __name__ == '__main__':
        bob = Person('Bob Smith')
        sue = Person('Sue Jones', job='dev', pay=100000)
        print(bob.name, bob.pay)
        print(sue.name, sue.pay)
        print(bob.lastName(), sue.lastName())
        sue.giveRaise(.10)
        print(sue.pay)



- Next, we add a method that will print the class details for easier testing and debugging.
    (Remeber that __repr__ is often used to provide code-level display and __str__ is for
     user-friendly display.)

    class Person:
        def __init__(self, name, job=None, pay=0):
            self.name = name
            self.job  = job
            self.pay  = pay
        def lastName(self):
            return self.name.split()[-1]
        def giveRaise(self, percent):
            self.pay = int(self.pay * (1 + percent))
        def __repr__(self):
            return '[Person: %s, %s]' % (self.name, self.pay)

    # Test the class
    if __name__ == '__main__':
        bob = Person('Bob Smith')
        sue = Person('Sue Jones', job='dev', pay=100000)
        print(bob)
        print(sue)
        print(bob.lastName(), sue.lastName())
        sue.giveRaise(.10)
        print(sue)



- Next, we create a subclass.

    class Manager(Person):
        def giveRaise(self, percent, bonus=.10):
            Person.giveRaise(self, percent + bonus)

    # Tests for Manager class
    tom = Manager('Tom Jones', 'mgr', 50000)
    tom.giveRaise(.10)
    print(tom)


  (Note that Python has a 'super' keyword, but it is not often used.  Due to multiple
     inheritance, the explicit superclass name is usually used.)



- Overriding a Constructor

    class Manager(Person):
        def __init__(self, name, pay):
            Person.__init__(self, name, 'mgr', pay)
        def giveRaise(self, percent, bonus=.10):
            Person.giveRaise(self, percent + bonus)



- Using Delegation instead of Inheritance

    # File person-composite.py
    # Embedding-based Manager alternative

    class Person:
        ...same...

    class Manager:
        def __init__(self, name, pay):
            self.person = Person(name, 'mgr', pay)      
        def giveRaise(self, percent, bonus=.10):
            self.person.giveRaise(percent + bonus)      
        def __getattr__(self, attr):
            return getattr(self.person, attr)    # Delegate all other attrs
        def __repr__(self):
            return str(self.person)

    if __name__ == '__main__':
        ...same...



- Next, we add a 'Department' class that contains a list of 'Person' or 'Manager' objects.

    # File person-department.py
    # Aggregate embedded objects into a composite

    class Person:
        ...same...

    class Manager(Person):
        ...same...

    class Department:
        def __init__(self, *args):
            self.members = list(args)
        def addMember(self, person):
            self.members.append(person)
        def giveRaises(self, percent):
            for person in self.members:
                person.giveRaise(percent)
        def showAll(self):
            for person in self.members:
                print(person)

    if __name__ == '__main__':
        bob = Person('Bob Smith')
        sue = Person('Sue Jones', job='dev', pay=100000)
        tom = Manager('Tom Jones', 50000)
        development = Department(bob, sue)          
        development.addMember(tom)
        development.giveRaises(.10)                 
        development.showAll()