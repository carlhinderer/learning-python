-------------------------------------------------
CHAPTER 24 - MODULE PACKAGES
-------------------------------------------------

- In addition to a module name, a directory path can also be imported.
    A directory of Python code is called a 'package', and this type of import
    is called a 'package import'.

  A package import turns a directory into a namespace, with attributes 
    corresponding to the subdirectories and module files that the directory
    contains.

    >>> import dir1.dir2.mod

    >>> from dir1.dir2.mod import x



- Any directory named within a package import statement must contain a 
    '__init__.py' file, or the import will fail.  The code is this file is
    run the first time a program imports the directory, so sometimes 
    initialization logic is put there.  Often, the file is just empty.

  For instance, in the above example, there would need to be an '__init__.py'
    in 'dir1' and in 'dir2'.



- An imported directory can be reloaded just like a module file.  

    >>> from imp import reload
    >>> reload(dir1)
    >>> reload(dir1.dir2)



- Usually, it is more convenient to use 'from' when importing longer 
    directory paths, so you don't have to keep typing the entire path.

    >>> from dir1.dir2 import mod
    >>> mod.z
    3



- There is a new scheme in 3.X which allows for 'relative imports'.  These allow you to
    use the same full path syntax inside a package as the code that imports from outside 
    the package.

    1. Imports with dots in from statements' module names indicate the imports should be
         relative-only to the containing package.

    2. Imports without dots default to an absolute search path order.  They search the package's
         own directory first, then the rest of the directories in sys.path.


    # Relative to this package
    >>> from . import spam

    # From a module named 'spam' located in the same package directory that this file appears
    >>> from .spam import name

    # Imports names from mypkg.string
    >>> from .string import name1, name2

    # Imports mypkg.string
    >>> from . import string

    # Imports sibling of mypkg
    >>> from .. import string



- Python 3.3+ actually has four import models.

    1. Basic module imports = imports of files and their contents, relative to the 
         sys.path module search path

         >>> import mod
         >>> from mod import attr
\

    2. Package imports = imports that give directory path extensions relative to the 
         sys.path module search path, each package requiring an initialization file

         >>> import dir1.dir2.mod
         >>> from dir.mod import attr


    3. Package-relative imports = used for intrapackage imports

         # Relative lookup
         >>> from . import mod

         # Absolute lookup
         >>> import mod


    4. Namespace packages (new in 3.3) = allows packages to span multiple directories,
         and don't require an initialization file

         >>> import splitdir.mod