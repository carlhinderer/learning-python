-------------------------------------------------
CHAPTER 8 - LISTS & DICTIONARIES
-------------------------------------------------

 - Python lists are:

     1. Ordered collections of arbitrary objects
     2. Accessed by offset
     3. Variable-length, heterogenous, and arbitrarily nestable
     4. Mutable sequences
     5. Arrays of object references



- Basic List Operations

    >>> len([1, 2, 3])
    3

    >>> [1, 2, 3] + [4, 5, 6]
    [1, 2, 3, 4, 5, 6]

    >>> ['Ni!'] * 4
    ['Ni!', 'Ni!', 'Ni!', 'Ni!']



- List Iteration and Comprehensions

    >>> 3 in [1, 2, 3]
    True

    >>> for x in [1, 2, 3]: print(x, end=' ')
    1 2 3


    # List comprehensions
    >>> res = [c * 4 for c in 'SPAM']
    >>> res['SSSS', 'PPPP', 'AAAA', 'MMMM']

    # List comprehension equivalent
    >>> res = []
    >>> for c in 'SPAM':
            res.append(c * 4)
    >>> res
    ['SSSS', 'PPPP', 'AAAA', 'MMMM']


    # The 'map' built-in function takes a function and applies it to a list,
    # collecting the results.

    >>> list(map(abs, [-2, -1, 0, 1, 2]))
    [2, 1, 0, 1, 2]



- Since lists are mutable, the objects in them can be changed in place.

    # Index Assignment
    >>> L = 'spam', 'Spam', 'SPAM!'
    >>> L[1] = 'eggs'
    >>> L 
    ['spam', 'eggs', 'SPAM!']


    # Slice Assignment
    >>> L[0:2] = ['eat', 'more']
    >>> L
    ['eat', 'more', 'SPAM!']


    # Adding List Elements (Version 1)
    >>> L = [1]
    >>> L[:0] = [2, 3, 4]      # Insert at :0
    >>> L
    [2, 3, 4, 1]

    # Adding List Elements (Version 2)
    >>> L[len(L):] = [5, 6, 7]      # Insert at len(L):
    >>> L
    [2, 3, 4, 1, 5, 6, 7]

    # Adding List Elements (Version 3)
    >>> L.extend([8, 9, 10])       # Insert at end
    >>> L
    [2, 3, 4, 1, 5, 6, 7, 8, 9, 10]



- List Method Calls

    # Append
    >>> L = ['eat', 'more', 'SPAM!']
    >>> L.append('please')
    >>> L
    ['eat', 'more', 'SPAM!', 'please']

    # Sort
    >>> L.sort()
    >>> L
    ['SPAM!', 'eat', 'more', 'please']

    # Sort (with advanced options)
    >>> L = ['abc', 'ABD', 'aBe']
    >>> L.sort(key=str.lower, reverse=True)
    >>> L
    ['aBe', 'ABD', 'abc']



- Comparisons and Sorts in 2.X and 3.X

    - In 2.X, different types can be compared and sorted.  When you do this,
        Python looks at the name of the type and compares them.  For
        instance, and 'int' is always less than a 'str'.

    - In 3.X, trying to compare or sort different types will raise an
        exception.



- Python dictionaries are:

    1. Hashes accessed by key
    2. Unordered collections of arbitrary objects
    3. Variable-length, heterogenous, and arbitrarily nestable
    4. Mutable
    5. Implemented as hash tables



- Basic Dictionary Operations

    # Creating Dictionaries
    >>> D = {}
    >>> D = ['name': 'Bob', 'age': 40]
    >>> E = {'cto': {'name': 'Bob', 'age': 40}}

    >>> D = dict(name='Bob', age=40)
    >>> D = dict([('name', 'Bob'), ('age', 40)])
    >>> D = dict(zip(keyslist, valueslist))

    >>> D = dict.fromkeys(['name', 'age'])
    >>> D
    {'name': None, 'age': None}

    >>> D = dict.fromkeys(['a', 'b'], 0)
    >>> D
    {'a': 0, 'b': 0}

    # Indexing by Key
    >>> D['name']
    >>> E['cto']['age']

    # Membership Test
    >>> 'age' in D



- Dictionary Method Calls

    >>> D.keys()
    >>> D.values()
    >>> D.items()       # All key/values pairs

    >>> D.copy()
    >>> D.clear()
    >>> D.update(E)     # Merge by keys

    >>> D.get(key, default?)     # Fetch by key, if absent default (or None)
    >>> D.pop(key, default?)     # Remove by key, if absent default (or Error)
    >>> D.setdefault(key, default?)     # Fetch by key, if absent set default (or None)

    >>> D.popitem()              # Remove and return any key/value pair
    >>> len(D)                   # Number of entries
    >>> list(D.keys())           # Create a new list of the keys (3.X)



- Changing Dictionaries in Place

    >>> D = {'eggs': 2, 'spam': 1, 'ham': 5}

    # Change an entry
    >>> D['ham'] = ['grill', 'bake', 'fry']

    # Remove an entry
    >>> del D['eggs']

    # Add an entry
    >>> D['brunch'] = 'Bacon'



- Iterating Through Entries

    >>> table = {'1975': 'Holy Grail',
                 '1979': 'Life of Brian', 
                 '1983': 'The Meaning of Life'}

    >>> for year in table:
            print(year + '\t' + table[year])



- Dictionary keys can be:

    1. Strings
    2. Integers
    3. Tuples (for compound key values)
    4. User-defined objects (must implement hashable)
 
    Mutable objects like lists, sets, and dictionaries cannot be keys, since their
      values can be changed.



- Dictionaries are often levereaged to implement sparse data structures.  For example, 
      matrices where only a few positions have values stored in them.  

    >>> Matrix = {}
    >>> Matrix[(2, 3, 4)] = 88
    >>> Matrix[(7, 9, 9)] = 99

    >>> Matrix.get((2, 3, 4), 0)
    88

    >>> Matrix.get((2, 3, 6), 0)
    0



- There were major changes to dictionaries in 3.X.  Dictionaries in 3.X:

    1. Support dictionary comprehension expression
    2. Return set-like iterable views for methods keys(), values(), and items()
    3. Require a new coding style for scanning by sorted keys (Because of #2)
    4. No longer support relative magnitude comparisons
    5. No longer have the D.has_key() method (use 'in' instead)



- Sorting dictionary keys in 3.X

    >>> D = {'a': 1, 'b': 2, 'c': 3}
    >>> Ks = D.keys()

    # Wont work! Can't sort a view object
    >>> Ks.sort()
    AttributeError: 'dict_keys' object has no attribute 'sort'

    # Can make it a list, then sort
    >>> Ks = list(Ks)
    >>> Ks.sort()

    # Or can use the sorted() method
    >>> Ks = D.keys()
    >>> for k in sorted(Ks): print(k, D[k])
    a 1
    b 2
    c 3