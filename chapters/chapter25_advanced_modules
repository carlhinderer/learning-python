-------------------------------------------------
CHAPTER 25 - ADVANCED_MODULE TOPICS
-------------------------------------------------

- Principles of modules

    1. You're always in a module in Python.
    2. Avoid coupling modules with global variables.
    3. Maximize module cohesion.
    4. Modules should rarely change other modules' variables.



- _X and __all__

    If you prefice a module attribute with an underscore, it will be ignored when a client
      imports a module with a 'from *' statement.

      # unders.py
      a, _b, c, _d = 1, 2, 3, 4

      >>> from unders import *
      >>> a
      1
      >>> b
      NameError: name '_b' is not defined


    If you want to define which attributes will be returned in a 'from *' statement, you
      can specify the '__all__' attribute in the module.

      # alls.py
      __all__ = ['a', '_c']
      a, b, _c, _d = 1, 2, 3, 4

      >>> from alls import *
      >>> a, _c
      (1, 3)
      >>> b
      NameError: name '_b' is not defined



- Enabling Future Language Features

    Changes that may potentially break existing code are sometimes included as optional
      extensions.  To turn them on,

    >>> from __future__ import featurename



- Mixed Usage Modes

    It is possible to create a module that can either be imported or run as a standalone
      program.  Each module has a built-in attribute '__name__'.

      - If the file is being run as a top-level program, '__name__' is set to '__main__'
      - If the file is being imported as a module, '__name__' is set to the module name

      >>> if __name__ == '__main__':
      ...     runtest()



- Changing the module search path

    >>> import sys
    >>> sys.path
    ['', 'c:\\temp', 'C:\\Windows\\system32\\python33.zip', ...more deleted...]

    >>> sys.path.append('C:\\sourcedir')
    >>> import string



- The 'as' extension

    # Shorten an attribute name
    >>> from modulename import attrname as name

    # Shorten a module name
    >>> import reallylongmodulename as name
    >>> name.func()



- Because modules expose properties as built-in attributes, it's easy to write programs
    that manage other programs.

    - The manager programs are usually called 'metaprograms'
    - The technique of looking at process internals is called 'introspection'